{"version":3,"file":"static/webpack/static/development/pages/_app.js.7360e5df90d5156ee448.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React from 'react';\nimport App from 'next/app';\nimport { ThemeProvider } from 'styled-components';\nimport { getServices, ServiceProvider } from 'services';\n\nimport { theme, GlobalStyles } from 'styles';\n\nclass MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {};\n\n    // On server-side, this runs once and creates new services\n    // On client-side, this always reuses existing services\n\n    const mobxServices = getServices({});\n\n    // Make services available to page's `getInitialProps`\n    ctx.mobxServices = mobxServices;\n\n    // Call \"super\" to run page's `getInitialProps`\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    // Gather serialization-friendly data from services\n    const initialData = {\n      github: mobxServices.githubService.data(),\n      readme: mobxServices.readmeService.data(),\n    };\n\n    // Pass initialData to render\n    return { pageProps, initialData };\n  }\n\n  render() {\n    const { Component, pageProps, initialData } = this.props;\n\n    // During SSR, this will create new Service instances so having `initialData` is crucial.\n    // During the client-side hydration, same applies.\n    // From then on, calls to `getServices()` return existing instances.\n    const services = getServices(initialData);\n\n    return (\n      <ThemeProvider theme={theme}>\n        <>\n          <GlobalStyles />\n          <ServiceProvider value={services}>\n            <Component {...pageProps} />\n          </ServiceProvider>\n        </>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default MyApp;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AA2BA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAGA;AAAA;AAMA;;;;;;;;;AA5CA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AACA;AACA;;AADA;AACA;;AAEA;AACA;AACA;AACA;AAFA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAzBA;AACA;AA+CA;;;;A","sourceRoot":""}